open Oni_Core.Utility;
open Oni_Model;
open Oni_IntegrationTestLib;

module TS = TextSynchronization;

// This test validates:
// - The 'oni-dev' extension gets activated
// - When typing in an 'oni-dev' buffer, the buffer received by the extension host
// is in sync with the buffer in the main process
runTestWithInput(
  ~name="ExtHostBufferOpen", (_input, dispatch, wait, _runEffects) => {
  wait(~name="Capture initial state", (state: State.t) =>
    state.mode == Vim.Types.Normal
  );

  // Wait until the extension is activated
  // Give some time for the exthost to start
  wait(
    ~timeout=30.0,
    ~name="Validate the 'oni-dev' extension gets activated",
    (state: State.t) =>
    List.exists(
      id => id == "oni-dev-extension",
      state.extensions.activatedIds,
    )
  );

  // Open an erroneous CSS file - verify we get some diagnostics
  dispatch(
    Actions.OpenFileByPath("integration_test/erroneous.css", None, None),
  );

  // TODO: Fix diagnostics on Windows!
  if (!Sys.win32) {
    // Should get an error diagnostic
    wait(
      ~timeout=30.0,
      ~name=
        "Validate a diagnostic showed up, since our current input is erroneous",
      (state: State.t) => {
        let bufferOpt = Selectors.getActiveBuffer(state);

        switch (bufferOpt) {
        | Some(buffer) =>
          let diags =
            Model.Diagnostics.getDiagnostics(state.diagnostics, buffer);
          List.length(diags) > 0;
        | _ => false
        };
      },
    );
  };

  let () =
    TS.validateTextIsSynchronized(
      ~description="Validate text model is consistent",
      dispatch,
      wait,
    );
  ();
});
