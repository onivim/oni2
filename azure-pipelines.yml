# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

name: $(Build.SourceVersion)
jobs:
- job: Hygiene_Checks
  displayName: 'Hygiene Checks'
  timeoutInMinutes: 0
  pool:
    vmImage: 'macOS 10.13'

  variables:
    STAGING_DIRECTORY: /Users/vsts/STAGING
    STAGING_DIRECTORY_UNIX: /Users/vsts/STAGING
    ESY__CACHE_INSTALL_PATH: /Users/vsts/.esy/3____________________________________________________________________/i
    ESY__CACHE_SOURCE_TARBALL_PATH: /Users/vsts/.esy/source/i
    # ESY__NPM_ROOT: /usr/local/lib/node_modules/esy

  steps:
  - script: brew update
  - script: brew install libpng ragel
  - template: .ci/use-node.yml
  - template: .ci/restore-build-cache.yml
  - template: .ci/esy-check-hygiene.yml
  - template: .ci/publish-build-cache.yml

- job: Linux
  displayName: 'Linux - Ubuntu 16.04'
  timeoutInMinutes: 0
  pool:
    vmImage: 'Ubuntu 16.04'

  variables:
    STAGING_DIRECTORY: /home/vsts/STAGING
    STAGING_DIRECTORY_UNIX: /home/vsts/STAGING
    ESY__CACHE_INSTALL_PATH: /home/vsts/.esy/3_____________________________________________________________________/i
    ESY__CACHE_SOURCE_TARBALL_PATH: /home/vsts/.esy/source/i
    # ESY__NPM_ROOT: /opt/hostedtoolcache/node/8.14.0/x64/lib/node_modules/esy

  steps:
  - script: sudo apt-get update
  - script: sudo apt-get install -y libncurses5-dev libacl1-dev libxrandr-dev libxinerama-dev libxcursor-dev libxi-dev libgl1-mesa-dev libglu1-mesa-dev mesa-utils mesa-utils-extra ragel libgtk-3-dev
  - template: .ci/use-node.yml
  - template: .ci/restore-build-cache.yml
  - template: .ci/esy-build-steps.yml
    parameters:
      platform: linux
  - script: _release/Onivim2.AppDir/usr/bin/Oni2 -f --checkhealth
    displayName: 'Release: --checkhealth'
  - template: .ci/publish-build-cache.yml

- job: CentOS
  displayName: 'Linux - CentOS - Docker Image'
  timeoutInMinutes: 0
  pool:
    vmImage: 'Ubuntu 16.04'

  variables:
    STAGING_DIRECTORY: /home/vsts/STAGING
    STAGING_DIRECTORY_UNIX: /home/vsts/STAGING
    ESY__CACHE_INSTALL_PATH: /home/vsts/.esy/3_____________________________________________________________________/i
    ESY__CACHE_SOURCE_TARBALL_PATH: /home/vsts/.esy/source/i
    # ESY__NPM_ROOT: /opt/hostedtoolcache/node/8.14.0/x64/lib/node_modules/esy

  steps:
  - script: docker build -t centos scripts/docker/centos
    displayName: 'docker build'
  - script: docker run --rm --mount src=`pwd`,target=/oni2,type=bind centos /bin/bash -c 'which ragel'
  - script: docker run --rm --mount src=`pwd`,target=/oni2,type=bind centos /bin/bash -c 'cd oni2 && ls -a'
  - script: docker run --cap-add SYS_ADMIN --device /dev/fuse --security-opt apparmor:unconfined --rm --mount src=`pwd`,target=/oni2,type=bind centos /bin/bash -c 'cd oni2 && ./scripts/docker-build.sh'
  - script: _release/Onivim2.AppDir/usr/bin/Oni2 -f --checkhealth
    displayName: 'Release: --checkhealth'
  - template: .ci/publish-linux.yml

- job: MacOS
  timeoutInMinutes: 0
  pool:
    vmImage: 'macOS 10.13'

  variables:
    STAGING_DIRECTORY: /Users/vsts/STAGING
    STAGING_DIRECTORY_UNIX: /Users/vsts/STAGING
    ESY__CACHE_INSTALL_PATH: /Users/vsts/.esy/3____________________________________________________________________/i
    ESY__CACHE_SOURCE_TARBALL_PATH: /Users/vsts/.esy/source/i
    # ESY__NPM_ROOT: /usr/local/lib/node_modules/esy

  steps:
  - script: brew update
  - script: brew install libpng ragel
  - template: .ci/use-node.yml
  - template: .ci/restore-build-cache.yml
  - template: .ci/esy-build-steps.yml
    parameters:
      platform: darwin
  - script: _release/Onivim2.App/Contents/MacOS/Oni2 -f --checkhealth
    displayName: 'Release: --checkhealth'
  - template: .ci/publish-osx.yml
  - template: .ci/publish-build-cache.yml

- job: Windows
  timeoutInMinutes: 0
  pool:
    vmImage: 'vs2017-win2016'

  variables:
    STAGING_DIRECTORY: C:\Users\VssAdministrator\STAGING
    STAGING_DIRECTORY_UNIX: /C/Users/VssAdministrator/STAGING
    ESY__CACHE_INSTALL_PATH: /C/Users/VssAdministrator/.esy/3_/i
    ESY__CACHE_SOURCE_TARBALL_PATH: /C/Users/VssAdministrator/.esy/source/i
    # ESY__NPM_ROOT: /C/npm/prefix/node_modules/esy

  steps:
  - powershell: ./scripts/windows/verify-signtool.ps1
    displayName: 'Validate signtool path'
  - template: .ci/use-node.yml
  - template: .ci/restore-build-cache.yml
  - template: .ci/esy-build-steps.yml
    parameters:
      platform: windows
  - script: dir
    workingDirectory: _release/win32
    displayName: 'check directory contents'
  - script: Oni2.exe -f --checkhealth
    workingDirectory: _release/win32
    displayName: 'Release: --checkhealth'
  - template: .ci/publish-win.yml
  - template: .ci/publish-build-cache.yml

- job: ValidateLinuxRelease
  displayName: "Linux: Validate Release"
  dependsOn: CentOS
  pool:
    vmImage: 'Ubuntu 16.04'

  steps:
  - script: 'echo ArtifactDir: $(System.ArtifactsDirectory)'
    displayName: 'Echo artifact dir'
  - task: DownloadBuildArtifacts@0
    inputs: 
      buildType: 'current'
      downloadType: 'single'
      artifactName: 'Release_Linux'
      downloadPath: '$(System.ArtifactsDirectory)'
  - script: ./scripts/linux/validate-release.sh
    env:
      SYSTEM_ARTIFACTSDIRECTORY: $(System.ArtifactsDirectory)

- job: ValidateMacOSRelease
  displayName: "MacOS: Validate Release"
  dependsOn: MacOS
  pool:
    vmImage: 'macOS 10.14'

  steps:
  - script: 'echo ArtifactDir: $(System.ArtifactsDirectory)'
    displayName: 'Echo artifact dir'
  - task: DownloadBuildArtifacts@0
    inputs: 
      buildType: 'current'
      downloadType: 'single'
      artifactName: 'Release_Darwin'
      downloadPath: '$(System.ArtifactsDirectory)'
  - script: ./scripts/osx/validate-release.sh
    env:
      SYSTEM_ARTIFACTSDIRECTORY: $(System.ArtifactsDirectory)

- job: ValidateWindowsRelease
  timeoutInMinutes: 0
  displayName: "Windows: Validate Release"
  dependsOn: Windows
  pool:
    vmImage: 'vs2017-win2016'

  steps:
  - script: 'echo ArtifactDir: $(System.ArtifactsDirectory)'
    displayName: 'Echo artifact dir'
  - task: DownloadBuildArtifacts@0
    inputs: 
      buildType: 'current'
      downloadType: 'single'
      artifactName: 'Release_Windows'
      downloadPath: '$(System.ArtifactsDirectory)'
  - powershell: ./scripts/windows/validate-release.ps1
    env:
      SYSTEM_ARTIFACTSDIRECTORY: $(System.ArtifactsDirectory)
